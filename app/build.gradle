apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'io.fabric'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion as Integer
    buildToolsVersion rootProject.ext.buildToolsVersion as String

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion as Integer
        targetSdkVersion rootProject.ext.compileSdkVersion as Integer

        applicationId "com.rxlearning"

        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    //<editor-fold desc="version control">
    def buildNoDevelop = 1
    def buildNoProd = 1
    def versionPropsFile = file('version.properties')

    if (versionPropsFile.canRead()) {
        def valueProd = 0
        def valueDev = 0
        def runTasks = gradle.startParameter.taskNames

        if (':app:generateReleaseSources' in runTasks || ':app:businessCompileReleaseSources' in runTasks) {
            valueProd = 1;
        } else {
            valueDev = 1;
        }
        def Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))
        buildNoDevelop = versionProps['BUILD_NUMBER_DEVELOPMENT'].toInteger() + valueDev
        buildNoProd = versionProps['BUILD_NUMBER_PRODUCTION'].toInteger() + valueProd

        versionProps['BUILD_NUMBER_DEVELOPMENT'] = buildNoDevelop.toString()
        versionProps['BUILD_NUMBER_PRODUCTION'] = buildNoProd.toString()

        println(" debug str : DEV = ${buildNoDevelop}")
        println(" debug str : REL = ${buildNoProd}")
        versionProps.store(versionPropsFile.newWriter(), null)
    }
    //</editor-fold>

    signingConfigs {
        debug {
            storeFile file("./debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
            versionNameSuffix "." + buildNoDevelop + " Development"
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        stage {
            minifyEnabled true
            debuggable false
            versionNameSuffix "." + buildNoDevelop + " Stage"
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            debuggable false
            versionNameSuffix "." + buildNoProd
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation supportDependencies.appCompat
    implementation supportDependencies.recyclerView
    implementation supportDependencies.design
    implementation supportDependencies.cardview

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    //  Catalytic
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.5@aar') { transitive = true }

    //  rx
    implementation 'io.reactivex.rxjava2:rxkotlin:2.2.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'

    //  ViewModel and LiveData
    implementation "android.arch.lifecycle:extensions:$liveDataVersion"
    kapt "android.arch.lifecycle:common-java8:$liveDataVersion"

    //  room
    implementation "android.arch.persistence.room:runtime:$roomVersion"
    implementation "android.arch.persistence.room:rxjava2:$roomVersion"
    kapt "android.arch.persistence.room:compiler:$roomVersion"

    //  stetho
    implementation 'com.facebook.stetho:stetho:1.5.0'

    //  glide
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    kapt "com.github.bumptech.glide:compiler:$glideVersion"

    //  bootstrap
    implementation "com.cleveroad.bootstrap:kotlin-core:$bootstrapVersion"
    implementation "com.cleveroad.bootstrap:kotlin-permissionrequest:$bootstrapVersion"
    implementation "com.cleveroad.bootstrap:kotlin-validators:$bootstrapVersion"

    //  Anko
    implementation "org.jetbrains.anko:anko-commons:$anko_version"
    implementation "org.jetbrains.anko:anko-common:$anko_version"
    implementation "org.jetbrains.anko:anko:$anko_version"

    //  Secure preferences
    implementation 'com.scottyab:secure-preferences-lib:0.1.4'

    //  Joda Time
    implementation 'joda-time:joda-time:2.9.9'

    //  Phone number
    implementation 'com.googlecode.libphonenumber:libphonenumber:8.8.7'

    //  Ahbottomnavigation
    implementation 'com.aurelhubert:ahbottomnavigation:2.1.0'

    //  Firebase
    implementation "com.google.firebase:firebase-core:16.0.5"
    implementation "com.google.firebase:firebase-auth:16.0.5"
    implementation "com.google.firebase:firebase-database:16.0.5"
    implementation 'com.google.firebase:firebase-firestore:17.1.3'

    //  Sticky Headers
    implementation 'com.timehop.stickyheadersrecyclerview:library:0.4.3'

}

apply plugin: 'com.google.gms.google-services'